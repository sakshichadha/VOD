
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import java.awt.Desktop;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author sakshi
 */
public class DownloadFrame extends javax.swing.JFrame {
String vpath;
String test;
    /**
     * Creates new form DownloadFrame
     */
    public DownloadFrame(String vpath) {
        initComponents();
        this.vpath=vpath;
        setSize(400,300);
        test= vpath.substring(vpath.lastIndexOf("/")+1);
       lb1.setText(test+" is downloading!Please Wait.");
        new Thread(new job_download()).start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lb1 = new javax.swing.JLabel();
        pb1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);
        getContentPane().add(lb1);
        lb1.setBounds(10, 20, 360, 70);

        pb1.setStringPainted(true);
        getContentPane().add(pb1);
        pb1.setBounds(10, 110, 360, 40);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DownloadFrame("").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lb1;
    private javax.swing.JProgressBar pb1;
    // End of variables declaration//GEN-END:variables
class job_download implements Runnable
{

        @Override
        public void run() {
            try {
                    HttpResponse<InputStream> httpresponse = Unirest.get("http://"+GlobalData.host+"/GetSource/"+vpath).asBinary();

                    //File Download Code
                    InputStream is = httpresponse.getBody();
                    FileOutputStream fos = new FileOutputStream(System.getProperty("user.home") + File.separator+"Downloads"+File.separator+test);

                    long contentlength = Integer.parseInt(httpresponse.getHeaders().getFirst("Content-Length"));
                    byte b[] = new byte[10000];
                    int r;
                    long count = 0;

                    while (true) {
                        r = is.read(b, 0, 10000);
                        fos.write(b, 0, r);
                        count = count + r;
                        int per = (int) (count * 100 / contentlength);
                        pb1.setValue(per);
                        pb1.setString(per + "%");
                        if (count == contentlength) {
                            break;
                        }
                    }

                    fos.close();
                    JOptionPane.showMessageDialog(rootPane,"File Downloaded....");
                    int r1=JOptionPane.showConfirmDialog(rootPane,"Do you want to open the downloaded file?"); 
                           if(r1==JOptionPane.YES_OPTION)
                           {
                              Desktop desktop = Desktop.getDesktop();
        
                      File file = new File(System.getProperty("user.home") + File.separator+"Downloads"+File.separator+test);
                                try {
                                    desktop.open(file);
                                } catch (IOException ex) {
                                    Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
                                }
                           }

                } catch (Exception ex) {
                    ex.printStackTrace();

                }
            
            
            
        }
   
    
}

}
