
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.teamdev.jxbrowser.chromium.Browser;
import com.teamdev.jxbrowser.chromium.swing.BrowserView;
import java.awt.BorderLayout;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sakshi
 */
public class FullCourseView extends javax.swing.JFrame {

    int width;
    String coursename;
    String email;
    String status;
    String vpath;
    String samplevideo;
    int amount;

    /**
     * Creates new form FullCourseView
     */
    public FullCourseView(String coursename, String email) {
        initComponents();
        width = Toolkit.getDefaultToolkit().getScreenSize().width;
        int height = Toolkit.getDefaultToolkit().getScreenSize().height;
        setSize(width, height);
        this.coursename = coursename;
        this.email = email;

        new Thread(new job_fetchdata()).start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lb_sqp = new javax.swing.JLabel();
        lb_name = new javax.swing.JLabel();
        lb_pre = new javax.swing.JLabel();
        lb_category = new javax.swing.JLabel();
        lb_price = new javax.swing.JLabel();
        bt_subscribe = new javax.swing.JButton();
        bt_sample = new javax.swing.JButton();
        lb_wp = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        p32 = new javax.swing.JPanel();

        p3.setBackground(new java.awt.Color(153, 153, 0));
        p3.setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(255, 204, 102));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(null);

        lb_sqp.setText("sq photo");
        lb_sqp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.add(lb_sqp);
        lb_sqp.setBounds(15, 20, 70, 70);

        lb_name.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        lb_name.setText("##name");
        jPanel2.add(lb_name);
        lb_name.setBounds(100, 30, 300, 20);

        lb_pre.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        lb_pre.setText("##pre-requistive");
        jPanel2.add(lb_pre);
        lb_pre.setBounds(100, 50, 330, 30);

        lb_category.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        lb_category.setText("##category");
        jPanel2.add(lb_category);
        lb_category.setBounds(100, 80, 320, 30);

        lb_price.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        lb_price.setText("Price");
        jPanel2.add(lb_price);
        lb_price.setBounds(840, 10, 160, 30);

        bt_subscribe.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        bt_subscribe.setText("Pay To Subscribe");
        bt_subscribe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_subscribeActionPerformed(evt);
            }
        });
        jPanel2.add(bt_subscribe);
        bt_subscribe.setBounds(827, 49, 230, 30);

        bt_sample.setFont(new java.awt.Font("Lucida Grande", 3, 13)); // NOI18N
        bt_sample.setText("View Sample Video");
        bt_sample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_sampleActionPerformed(evt);
            }
        });
        jPanel2.add(bt_sample);
        bt_sample.setBounds(830, 90, 230, 30);

        getContentPane().add(jPanel2);
        jPanel2.setBounds(0, 150, 1470, 150);

        lb_wp.setText("wide photo");
        getContentPane().add(lb_wp);
        lb_wp.setBounds(0, -4, 1470, 150);

        p32.setBackground(new java.awt.Color(153, 153, 0));
        p32.setLayout(null);
        jScrollPane1.setViewportView(p32);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 300, 1430, 550);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bt_subscribeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_subscribeActionPerformed

        int r = JOptionPane.showConfirmDialog(rootPane, "Are you sure you want to subscribe");
        if (r == JOptionPane.YES_OPTION) {

            PaymentDemo obj = new PaymentDemo();
            obj.setVisible(true);

        }
        // TODO add your handling code here:
    }//GEN-LAST:event_bt_subscribeActionPerformed

    private void bt_sampleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_sampleActionPerformed
        // TODO add your handling code here:
        JavaFXMediaPlayerFrame obj;
        obj = new JavaFXMediaPlayerFrame(samplevideo);
        obj.setVisible(true);


    }//GEN-LAST:event_bt_sampleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FullCourseView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FullCourseView("", "").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_sample;
    private javax.swing.JButton bt_subscribe;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_category;
    private javax.swing.JLabel lb_name;
    private javax.swing.JLabel lb_pre;
    private javax.swing.JLabel lb_price;
    private javax.swing.JLabel lb_sqp;
    private javax.swing.JLabel lb_wp;
    private javax.swing.JPanel p3;
    private javax.swing.JPanel p32;
    // End of variables declaration//GEN-END:variables
class job_fetchdata implements Runnable {

        @Override
        public void run() {
            try {
                HttpResponse res = Unirest.get("http://"+GlobalData.host+"/fetchdata").queryString("coursename", coursename).
                        queryString("email", email).asString();

                StringTokenizer st2 = new StringTokenizer(res.getBody().toString(), ";");

                String cname = st2.nextToken();
                String pre = st2.nextToken();
                String cat = st2.nextToken();
                String sqp = st2.nextToken();
                String s = st2.nextToken();
                amount = Integer.parseInt(s);
                String widephoto = st2.nextToken();
                samplevideo = st2.nextToken();
                status = st2.nextToken();

                lb_name.setText("Course: " + cname);
                lb_pre.setText("Pre Requisite: " + pre);
                lb_category.setText("Category: " + cat);
                lb_price.setText("Price: " + amount);
                BufferedImage myimage = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + sqp));
                BufferedImage newimage = resize(myimage, lb_sqp.getWidth(), lb_sqp.getHeight());
                lb_sqp.setIcon(new ImageIcon(newimage));
                BufferedImage myimage1 = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + widephoto));
                BufferedImage newimage1 = resize(myimage1, lb_wp.getWidth(), lb_wp.getHeight());
                lb_wp.setIcon(new ImageIcon(newimage1));

                new Thread(new job_video()).start();

            } catch (UnirestException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
        return bi;
    }

    class job_video implements Runnable {

        int x = 20, y = 20;

        @Override
        public void run() {
            try {

                p32.removeAll();
                p32.repaint();

                HttpResponse res = Unirest.get("http://"+GlobalData.host+"/streamvideos").queryString("coursename", coursename).asString();
                System.out.println(res.getBody());
                StringTokenizer st = new StringTokenizer(res.getBody().toString(), "~");
                int count = st.countTokens();
                System.out.println("count" + count);
                int rows = 1;
                if (count % 4 == 0) {
                    rows = count / 4;
                } else {
                    rows = count / 4;
                    rows += 1;
                }
                System.out.println("rows" + rows);
                p32.setPreferredSize(new Dimension(p32.getWidth() - 50, rows * 300));
                SingleVideoPanel array[] = new SingleVideoPanel[count];
                for (int i = 0; i < count; i++) {
                    String lectureRow = st.nextToken();
                    StringTokenizer st2 = new StringTokenizer(lectureRow, ";");

                    array[i] = new SingleVideoPanel();
                    if (status.equalsIgnoreCase("yes")) {
                        bt_subscribe.setEnabled(false);
                        array[i].jButton1.setEnabled(true);
                        array[i].jb_download.setEnabled(true);

                    } else {

                        bt_subscribe.setEnabled(true);
                        array[i].jButton1.setEnabled(false);
                        array[i].jb_download.setEnabled(false);

                    }

                    array[i].setBounds(x, y, 254, 264);
                    int lectureno = Integer.parseInt(st2.nextToken());
                    System.out.println("lectureno" + lectureno);
                    String Title = st2.nextToken();
                    System.out.println("title" + Title);
                    int duration = Integer.parseInt(st2.nextToken());
                    System.out.println("duration" + duration);
                    String thumbnail = st2.nextToken();
                    vpath = st2.nextToken();
                    System.out.println("thumbnail" + thumbnail);
                    System.out.println("vpath" + vpath);

                    array[i].lb_lecture.setText("LectureNo:" + lectureno + "");
                    array[i].lb_duration.setText("Duration:" + duration + "");
                    array[i].lb_title.setText("Title:" + Title + "");
                    BufferedImage myimage = ImageIO.read(new URL("http://"+GlobalData.host+"/GetSource/" + thumbnail));
                    BufferedImage newimage = resize(myimage, array[i].lb_photo.getWidth(), array[i].lb_photo.getHeight());
                    array[i].lb_photo.setIcon(new ImageIcon(newimage));
                    array[i].jb_download.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            DownloadFrame obj;
                            obj = new DownloadFrame(vpath);
                            obj.setVisible(true);

                        }
                    });

                    array[i].jButton1.addActionListener(new ActionListener() {

                        @Override
                        public void actionPerformed(ActionEvent e) {
                            JavaFXMediaPlayerFrame obj;
                            obj = new JavaFXMediaPlayerFrame(vpath);
                            obj.setVisible(true);

                        }
                    });

                    p32.add(array[i]);
                    if (x < 1050) {
                        x = x + 350;
                    } else {
                        y = y + 300;
                        x = 20;
                    }
                    p32.repaint();

                }

            } catch (UnirestException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (MalformedURLException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }

    class job_subscribe implements Runnable {

        @Override
        public void run() {
            try {

                HttpResponse res = Unirest.get("http://"+GlobalData.host+"/subscribe").queryString("email", email).queryString("coursename", coursename).asString();
                if (res.getBody().equals("success")) {

                    {
                        JOptionPane.showMessageDialog(rootPane, "you successfully subscribed");
                        new Thread(new job_fetchdata()).start();

                    }

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Subscription Failed");
                }

            } catch (UnirestException ex) {
                Logger.getLogger(FullCourseView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public class PaymentDemo extends javax.swing.JFrame {

        public PaymentDemo() {
            initComponents();
            Browser browser = new Browser();
            BrowserView view = new BrowserView(browser);
            add(view, BorderLayout.CENTER);
            view.setBounds(0, 0, 1000, 1000);

            setSize(1000, 1000);
            setVisible(true);
//        String path = System.getProperty("user.home");
//        path = path.replaceAll("\\\\", "/");
//        browser.loadURL("file:///"+path+"/payment1.jsp?amount=700");

            int amount = 900000;
            browser.loadHTML("<!DOCTYPE html>\n"
                    + "<html>\n"
                    + "    <head>\n"
                    + "        <title>TODO supply a title</title>\n"
                    + "        <meta charset=\"UTF-8\">\n"
                    + "        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
                    + "    </head>\n"
                    + "    <body>\n"
                    + "\n"
                    + "        <h1>VMM Payment Gateway Demo</h1>\n"
                    + "\n"
                    + "        <form action=\"\" method=\"POST\">\n"
                    + "            <!-- Note that the amount is in paise = 50 INR -->\n"
                    + "            <script\n"
                    + "                src=\"https://checkout.razorpay.com/v1/checkout.js\"\n"
                    + "                data-key=\"rzp_test_96HeaVmgRvbrfT\"\n"
                    + "                data-amount=\"" + amount + "\"\n"
                    + "                data-buttontext=\"Pay with Razorpay\"\n"
                    + "                data-name=\"VMM Education\"\n"
                    + "                data-description=\"Thank You for purchaing Silver Package.\"\n"
                    + "                data-image=\"http://vmmeducation.com/images/newlogo.png\"\n"
                    + "                data-prefill.name=\"Amrinder Singh\"\n"
                    + "                data-prefill.email=\"amrinder@vmmeducation.com\"\n"
                    + "                data-theme.color=\"#F3EE54\"\n"
                    + "            ></script>\n"
                    + "            <input type=\"hidden\" value=\"Hidden Element\" name=\"hidden\">\n"
                    + "        </form>\n"
                    + "\n"
                    + "   <h1>Please close the page to proceed</h1> </body>\n"
                    + "</html>\n"
                    + "");

        }

        @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

            setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
            addWindowListener(new java.awt.event.WindowAdapter() {
                public void windowClosing(java.awt.event.WindowEvent evt) {
                    formWindowClosing(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 400, Short.MAX_VALUE)
            );
            layout.setVerticalGroup(
                    layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGap(0, 300, Short.MAX_VALUE)
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

        private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
            new Thread(new job_subscribe()).start();

        }//GEN-LAST:event_formWindowClosing

        /**
         * @param args the command line arguments
         */
        // Variables declaration - do not modify//GEN-BEGIN:variables
        // End of variables declaration//GEN-END:variables
    }

}
